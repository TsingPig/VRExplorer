name: Sync Folder to New Repo

on: # 触发条件
  push: # 当某次的push的差异中包含指定路径时触发
    paths:
      - 'Assets/Package/**'
  workflow_dispatch: # 是固定的事件类型，在Github Actions界面的"Run workflow"按钮手动触发
    inputs: # 定义手动触发时的输入参数
      force_sync: # 是否强制同步
        description: 'Force sync even if no changes detected' 
        required: false 
        default: 'false' 
        type: boolean 

jobs: # Jobs是工作流的核心部分，定义了要运行的任务，每个job包含多个步骤
  sync: # sync是job的标识符，可以自定义
    runs-on: ubuntu-latest # 指定job运行的环境，这里使用最新的Ubuntu版本
    steps:
      - name: Checkout repository
        # 效果：Runner 上生成一个完整的仓库副本，分支、标签、提交历史全有。
        uses: actions/checkout@v3 #官方 Action，用于把当前仓库克隆到 Runner。Runner 是 GitHub 提供的虚拟机环境
        with: # 配置选项
          fetch-depth: 0  # 确保获取完整历史记录 

      - name: Configure Git
        # 这里统一用 GitHub Actions Bot / actions@github.com，便于识别自动提交。
        run: |
          git config --global user.name "GitHub Actions Bot" 
          git config --global user.email "actions@github.com"

      - name: Prepare and sync folder
        # set -euo pipefail：开启 严格模式
        # -e：命令失败立即退出
        # -u：使用未定义变量时报错
        # -o pipefail：管道中任意子命令失败整个命令返回失败
        run: |
          set -euo pipefail  # 严格模式：错误、未定义变量、管道失败时终止
          # 配置变量
          FOLDER_PATH="Assets/Package" # 要同步的文件夹路径
          NEW_REPO="VRExplorer_Release" # 目标新仓库名称
          NEW_REPO_URL="https://${{ secrets.GH_PAT }}@github.com/${{ github.repository_owner }}/$NEW_REPO.git"

          # 如果是手动触发且未启用 force_sync，检查是否有实际更改
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_sync }}" = "false" ]; then
            echo "::notice::Manual trigger detected, checking folder changes..."
            if git diff --quiet HEAD^ -- "$FOLDER_PATH"; then
              echo "::warning::No changes detected in $FOLDER_PATH, skipping sync."
              exit 0
            fi
          fi


          # 创建临时目录并复制内容
          TEMP_DIR="$(mktemp -d)"
          echo "::group::Copying files to temp directory" # 折叠日志
          cp -rv "$FOLDER_PATH/"* "$TEMP_DIR"  # 把子目录内容拷贝进去
          echo "::endgroup::" 

          # 同步到新仓库
          cd "$TEMP_DIR"
          git init -b main
          git remote add origin "$NEW_REPO_URL"
          git add .
          git commit -m "Sync from $FOLDER_PATH (Source: ${{ github.repository }}@${{ github.sha }})"
          git push origin main --force
          echo "::notice::Successfully synced to $NEW_REPO_URL"

          # 清理临时目录
          rm -rf "$TEMP_DIR"